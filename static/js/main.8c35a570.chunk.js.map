{"version":3,"sources":["api/api.js","components/Search/Search.js","components/Charts/Charts.js","components/Charts/script.js","components/Card/Card.js","components/CardList/CardList.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["apiCall","link","fetch","then","response","json","Search","onSearchChange","className","type","onChange","placeholder","Charts","country","cases","map","data","Confirmed","casesCountry","recovers","Recovered","recoversCountry","deaths","Deaths","deathsCountry","labels","Date","substring","labelsCountry","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Card","name","newcases","newdeaths","newrecovers","rownum","scope","CardList","countriesF","date","sort","a","b","Number","TotalConfirmed","reverse","i","key","Country","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","App","this","props","onRequestCity","onRequestChart","isPendingC","searchField","countries","global","isPending","countryFiltered","filter","toLowerCase","includes","rel","href","integrity","crossOrigin","onClick","Component","connect","state","searchCity","requestCity","requestChart","dispatch","event","payload","target","value","console","log","catch","error","url","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initalStateSearch","initalStateCity","initalStateChart","logger","createLogger","rootReducers","combineReducers","action","Countries","Global","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c35a570.chunk.js","sourcesContent":["export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())\r\n","import React from 'react'\r\nimport './Search.css'\r\n\r\nexport default function Search({ onSearchChange }) {\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <input type=\"search\" onChange={onSearchChange} className=\"form-control search\" placeholder=\"searh country\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\n\r\nimport { casesCountry, labelsCountry, recoversCountry, deathsCountry } from './script'\r\n\r\n\r\nexport default function Charts({ country }) {\r\n\r\n  if (country === 'code=404, message=Not Found, internal=<nil>') {\r\n    return (\r\n      <h1>something went wrong!</h1>\r\n    )\r\n  }\r\n  else {\r\n\r\n    const cases = casesCountry(country)\r\n    const recovers = recoversCountry(country)\r\n    const deaths = deathsCountry(country)\r\n    const labels = labelsCountry(country)\r\n\r\n    const data = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: '# Of Cases',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: cases\r\n        },\r\n        {\r\n          label: '# Of Recovers',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,92,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,92,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: recovers\r\n        },\r\n        {\r\n          label: '# Of Deaths',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(250,92,92,1)',\r\n          borderCapStyle: 'butt',\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: 'miter',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: deaths\r\n        }\r\n      ]\r\n    }//end of data\r\n\r\n    return (\r\n\r\n      <div className=\"container-fluid\">\r\n        <Line data={data}></Line>\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n","export const casesCountry=(country)=>{\r\n    \r\n    const caseData=country.map(data=>{\r\n        return data.Confirmed\r\n    })\r\n    return caseData\r\n}\r\n\r\nexport const labelsCountry=(country)=>{\r\n\r\n    const labalData=country.map(data=>{\r\n        return data.Date.substring(0,10)\r\n    })\r\n    return labalData\r\n}\r\n\r\n\r\nexport const recoversCountry=(country)=>{\r\n\r\n    const recoData=country.map(data=>{\r\n        return data.Recovered\r\n    })\r\n    return recoData\r\n}\r\n\r\nexport const deathsCountry=(country)=>{\r\n\r\n    const deathData=country.map(data=>{\r\n        return data.Deaths\r\n    })\r\n    return deathData\r\n}\r\n","import React from 'react'\r\n\r\nimport './Card.css'\r\n\r\nexport default function Card({ name, cases,newcases, deaths,newdeaths, recovers,newrecovers,rownum }) {\r\n\r\n    return (        \r\n            <tbody>\r\n            <th scope=\"row\">{rownum+1}</th>              \r\n              <td ><p className=\"text-center  text-capitalize \">{name}</p></td>\r\n              <td className=\"text-capitalize \"><p >{cases}</p></td>\r\n              <td><p className=\"text-capitalize \">{newcases}</p></td>\r\n              <td><p >{deaths}</p></td>\r\n              <td><p >{newdeaths}</p></td>\r\n              <td><p >{recovers}</p></td>\r\n              <td><p >{newrecovers}</p></td>             \r\n                </tbody>     \r\n    );\r\n}\r\n","import React from 'react'\r\nimport Card from '../Card/Card'\r\n\r\nimport './CardList.css'\r\n\r\nexport default function CardList({ countriesF, date }) {\r\n\r\n    countriesF.sort(compare)\r\n    countriesF.reverse()\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='row'>\r\n                <h2 className='text-center text-capitalized'>last updated: {date}</h2>\r\n                <table className='table table-bordered'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>Country</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>TotalCases</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>NewCases</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>TotalDeaths</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>NewDeaths</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>TotalRecovered</th>\r\n                            <th scope=\"col\" className='font-weight-normal'>NewRecovered</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {\r\n                        countriesF.map((country, i) => {\r\n                            return (\r\n                                <Card\r\n                                    key={i}\r\n                                    rownum={i}\r\n                                    name={countriesF[i].Country}\r\n                                    cases={countriesF[i].TotalConfirmed}\r\n                                    newcases={countriesF[i].NewConfirmed}\r\n                                    deaths={countriesF[i].TotalDeaths}\r\n                                    newdeaths={countriesF[i].NewDeaths}\r\n                                    recovers={countriesF[i].TotalRecovered}\r\n                                    newrecovers={countriesF[i].NewRecovered}\r\n                                ></Card>\r\n                            )\r\n                        }\r\n                        )\r\n                    }\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n    function compare(a, b) {//sorting the counries by cases confirmed\r\n        if (Number(a.TotalConfirmed) < Number(b.TotalConfirmed)) {\r\n            return -1;\r\n        }\r\n        if (Number(a.TotalConfirmed) > Number(b.TotalConfirmed)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport { setSearchField, requestCity,requestChart } from '../actions'\n\n\nimport Search from '../components/Search/Search';\nimport Charts from '../components/Charts/Charts';\nimport CardList from '../components/CardList/CardList';\n\nimport './App.css';\n\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchCity.searchField,\n    countries: state.requestCity.countries,\n    date:state.requestCity.date,\n    global:state.requestCity.global,\n    isPending: state.requestCity.isPending,\n    isPendingC:state.requestChart.isPendingC,\n    country: state.requestChart.country\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => {\n      dispatch(\n        setSearchField(event.target.value))\n    },\n    onRequestCity: () => dispatch(requestCity())\n    ,\n    onRequestChart: (name)=> dispatch(requestChart(name))\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.onRequestCity()\n    \n    \n  }\n\n  render() {\n    const { onSearchChange,onRequestChart, isPendingC,country,searchField, countries,global,date, isPending } = this.props;\n    const countryFiltered=countries.filter(country=>{\n      return country.Country.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    return (\n      <div className=\"App\">\n\n\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" />\n\n        <link href=\"https://fonts.googleapis.com/css2?family=Cairo:wght@400;600;900&display=swap\" rel=\"stylesheet\" />\n\n        <Search onSearchChange={onSearchChange}  ></Search>\n        {isPending ? <h2>Fetching Data...</h2> :\n          <CardList  countriesF={countryFiltered} global={global} date={date} />\n        }\n        \n        {(searchField.toLowerCase().includes('united states of america')) ? \n            <h1 className='font-weight-bold'>USA's data is too big it breaks the chart library!</h1>:\n        <button  className='btn text-capitalize btn-width btn-primary btn-lg' onClick={()=>onRequestChart(searchField)}\n            >show charts of {searchField}</button>\n        }\n         \n        <h1 className='text-center text-capitalize '>enter full name of country to see chart</h1>\n        <Charts country={country}></Charts>\n        \n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","\r\nimport { apiCall } from './api/api'\r\n\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_COUNTRIES_FAILED,\r\n    REQUEST_COUNTRIES_PENDING,\r\n    REQUEST_COUNTRIES_SUCCESS,\r\n    REQUEST_CHARTS_FAILED,\r\n    REQUEST_CHARTS_PENDING,\r\n    REQUEST_CHARTS_SUCCESS\r\n}\r\n    from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestCity = () => (dispatch) => {\r\n\r\n    dispatch({ type: REQUEST_COUNTRIES_PENDING })\r\n    apiCall(`https://api.covid19api.com/summary`)\r\n        .then(data => dispatch({ type: REQUEST_COUNTRIES_SUCCESS, payload: data }))\r\n        .then(data => console.log(data))\r\n        .catch(error => dispatch({ type: REQUEST_COUNTRIES_FAILED, payload: error }))\r\n}\r\n\r\n\r\nexport const requestChart = (name) => (dispatch) => {\r\n    \r\n    const url =`https://api.covid19api.com/country/${name}`\r\n    dispatch({ type: REQUEST_CHARTS_PENDING })\r\n    apiCall(url)\r\n        .then(data => dispatch({ type: REQUEST_CHARTS_SUCCESS, payload: data }))\r\n        .then(data => console.log(data))\r\n        .catch(error => dispatch({ type: REQUEST_CHARTS_FAILED, payload: error }))\r\n}\r\n\r\n\t\t\t","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_COUNTRIES_PENDING = 'REQUEST_COUNTRIES_PENDING';\r\nexport const REQUEST_COUNTRIES_SUCCESS = 'REQUEST_COUNTRIES_SUCCESS';\r\nexport const REQUEST_COUNTRIES_FAILED = 'REQUEST_COUNTRIES_FAILED';\r\n\r\n\r\nexport const REQUEST_CHARTS_PENDING = 'REQUEST_CHARTS_PENDING';\r\nexport const REQUEST_CHARTS_SUCCESS = 'REQUEST_CHARTS_SUCCESS';\r\nexport const REQUEST_CHARTS_FAILED = 'REQUEST_CHARTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_COUNTRIES_FAILED,\r\n    REQUEST_COUNTRIES_PENDING,\r\n    REQUEST_COUNTRIES_SUCCESS,\r\n    REQUEST_CHARTS_FAILED,\r\n    REQUEST_CHARTS_PENDING,\r\n    REQUEST_CHARTS_SUCCESS\r\n}\r\n    from './constants'\r\n\r\n\r\n     const initalStateSearch={\r\n         searchField:''\r\n     }\r\n\r\n     export const searchCity=(state=initalStateSearch,action={})=>{\r\n         switch(action.type){\r\n             case CHANGE_SEARCH_FIELD:\r\n                 return {...state,searchField:action.payload}\r\n             default:\r\n                 return state    \r\n         }\r\n     }\r\n\r\n     const initalStateCity={\r\n         countries:[],\r\n         global:{},\r\n         data:'',\r\n         isPending:true\r\n     }\r\n\r\n     export const requestCity=(state=initalStateCity,\r\n        action={})=>{\r\n            switch (action.type){\r\n                case REQUEST_COUNTRIES_PENDING:\r\n                    return {...state,isPending:true}\r\n                case REQUEST_COUNTRIES_SUCCESS:\r\n                    console.log(action.payload,'we are at reducers')\r\n                    return {...state,countries:action.payload.Countries,global:action.payload.Global,date:action.payload.Date,isPending:false}\r\n                case REQUEST_COUNTRIES_FAILED:\r\n                    return {...state,error:action.payload}\r\n                default:\r\n                    return state    \r\n            }\r\n            \r\n        }\r\n\r\n\r\n\r\n        const initalStateChart={\r\n            country:[],\r\n            isPendingC:true\r\n        }\r\n\r\n        export const requestChart=(state=initalStateChart,\r\n            action={})=>{\r\n                switch(action.type){\r\n                    case REQUEST_CHARTS_PENDING:\r\n                        return {...state,isPendingC:true}\r\n                    case REQUEST_CHARTS_SUCCESS:\r\n                        return {...state,country:action.payload,isPendingC:false}\r\n                    case REQUEST_CHARTS_FAILED:\r\n                        return {...state,error:action.payload}\r\n                    default:\r\n                        return state        \r\n                }\r\n            }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\n\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {searchCity,requestCity,requestChart} from './reducers'\n\nimport './index.css';\n\nconst logger =createLogger();\n\nconst rootReducers=combineReducers({searchCity,requestCity,requestChart})\n\nconst store=createStore(rootReducers\n  ,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}